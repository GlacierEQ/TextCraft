<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="this.ForgeTab.Label" xml:space="preserve">
    <value>Craft</value>
  </data>
  <data name="this.ToolsGroup.Label" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="this.GenerateButton.Label" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="this.GenerateButton.SuperTip" xml:space="preserve">
    <value>Creates tailored responses using the user's prompt and the current document's content.</value>
  </data>
  <data name="this.DefaultCheckBox.Label" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="this.AboutButton.Label" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="this.AboutButton.ScreenTip" xml:space="preserve">
    <value>Provides details about this application.</value>
  </data>
  <data name="this.CancelButton.Label" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="this.CancelButton.ScreenTip" xml:space="preserve">
    <value>Halts the text generation process.</value>
  </data>
  <data name="this.WritingToolsGallery.Label" xml:space="preserve">
    <value>Writing Tools</value>
  </data>
  <data name="this.WritingToolsGallery.SuperTip" xml:space="preserve">
    <value>Enhance your writing with AI-powered tools for grammar, style, and clarity.</value>
  </data>
  <data name="this.ReviewButton.Label" xml:space="preserve">
    <value>Review</value>
  </data>
  <data name="this.ReviewButton.SuperTip" xml:space="preserve">
    <value>Enhance your document with AI-driven comments and suggestions.</value>
  </data>
  <data name="this.ProofreadButton.Label" xml:space="preserve">
    <value>Proofread</value>
  </data>
  <data name="this.ProofreadButton.SuperTip" xml:space="preserve">
    <value>Check for spelling, grammar, and style errors to polish your document.</value>
  </data>
  <data name="this.RewriteButton.Label" xml:space="preserve">
    <value>Rewrite</value>
  </data>
  <data name="this.RewriteButton.SuperTip" xml:space="preserve">
    <value>Revise and enhance your text with AI-powered suggestions.</value>
  </data>
  <data name="this.SettingsGroup.Label" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="this.RAGControlButton.Label" xml:space="preserve">
    <value>RAG Control</value>
  </data>
  <data name="this.RAGControlButton.SuperTip" xml:space="preserve">
    <value>Manage files within the Retrieval Augmentation Generation (RAG) system.</value>
  </data>
  <data name="this.ModelListDropDown.Label" xml:space="preserve">
    <value>Model List</value>
  </data>
  <data name="this.ModelListDropDown.SuperTip" xml:space="preserve">
    <value>Select a language model for use in TextCraft.</value>
  </data>
  <data name="this.DefaultCheckBox.SuperTip" xml:space="preserve">
    <value>Set the default language model for TextCraft.</value>
  </data>
  <data name="this.OptionsGroup.Label" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="this.InfoGroup.Label" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="(ThisAddIn.cs) [InitializeAddIn] ArgumentException #1" xml:space="preserve">
    <value>Embed model missing. Please install it to proceed!</value>
  </data>
  <data name="[WritingToolsGallery_ButtonClick] ArgumentOutOfRangeException #1" xml:space="preserve">
    <value>Selected button not recognized.</value>
  </data>
  <data name="[ReviewButton_Click] MessageBox #1 (text)" xml:space="preserve">
    <value>Review complete! No comments needed for this document.</value>
  </data>
  <data name="[ReviewButton_Click] MessageBox #1 (caption)" xml:space="preserve">
    <value>Action Completed</value>
  </data>
  <data name="(ModelProperties.cs) [GetContextLength] OllamaMissingContextWindowException #1" xml:space="preserve">
    <value>Unable to fetch the context length for {0}!</value>
  </data>
  <data name="(CommonUtils.cs) [GetInternetAccessPermission] MessageBox #1 Text" xml:space="preserve">
    <value>Do you want to allow TextCraft to access the following internet resource?</value>
  </data>
  <data name="(CommonUtils.cs) [GetInternetAccessPermission] MessageBox #1 Caption" xml:space="preserve">
    <value>Internet Access</value>
  </data>
  <data name="(WordMarkdown.cs) [ApplyMarkdownFormatting] ArgumentOutofRangeException #1" xml:space="preserve">
    <value>Unknown format type for Markdown processing!</value>
  </data>
  <data name="(WordMarkdown.cs) [GetCodeBlockAtIndex] ApplicationException #1" xml:space="preserve">
    <value>Markdown code block not found at index {0}!</value>
  </data>
  <data name="(WordMarkdown.cs) [ApplyImageFormatting] ArgumentException #1" xml:space="preserve">
    <value>Invalid URL format</value>
  </data>
  <data name="(WordMarkdown.cs) [ApplyHeadingFormatting] ArgumentException #1" xml:space="preserve">
    <value>Invalid Markdown heading: must contain 1 to 6 '#' characters.</value>
  </data>
  <data name="[AnalyzeText] InvalidRangeException #1" xml:space="preserve">
    <value>No text selected for analysis!</value>
  </data>
  <data name="this.CommentSystemPrompt" xml:space="preserve">
    <value>Provide kind, respectful, and constructive feedback on documents, mimicking a human reviewer and mentor. Focus on offering concise, friendly suggestions for improvement, like a supportive friend.

# Areas to Review
- Clarity: Assess how clear and understandable the text is.
- Coherence: Check if the text flows logically and smoothly.
- Impact: Offer suggestions to enhance the text's persuasiveness and relevance.
- Tone: Ensure the tone aligns with the intended audience and purpose.

# Output Format
Provide brief and helpful comments, focusing on one or two key points in each feedback instance. Aim for the format: "[Comment on issue]: [Suggestion for improvement]."

# Notes
- Be empathetic and encouraging in tone.
- Feedback should be actionable and easy to understand.
- Maintain a mentor-like approach, suggesting improvements rather than criticism.</value>
  </data>
  <data name="(CommentHandler.cs) [AICommentReplyTask] UserChatMessage #2" xml:space="preserve">
    <value>Based on the previous AI comments, suggest additional specific improvements to the paragraph, focusing on clarity, coherence, structure, grammar, and overall effectiveness. Ensure that your suggestions are detailed and aimed at improving the paragraph within the context of the entire Document.</value>
  </data>
  <data name="[ProofreadButton_Click] SystemPrompt" xml:space="preserve">
    <value>You are a proofreading assistant. Your task is to correct any spelling, grammar, punctuation, or stylistic errors in the provided text, using the provided context if appropriate. Only make necessary changes directly in the text. If the text is already correct and does not require any changes, simply repeat the text as it is without providing any explanations or comments.</value>
  </data>
  <data name="[ProofreadButton_Click] UserPrompt" xml:space="preserve">
    <value>Please proofread the following text. Make any necessary corrections directly in the text without adding any explanations or comments. If the text is correct and needs no changes, just repeat it exactly as it is:</value>
  </data>
  <data name="[RewriteButton_Click] SystemPrompt" xml:space="preserve">
    <value>Rewrite the text for clarity, improved flow, and human-like tone, integrating it with the provided paragraph context. Keep the original meaning. Output only the revised text.</value>
  </data>
  <data name="[RewriteButton_Click] UserPrompt" xml:space="preserve">
    <value>Please rewrite the following text:</value>
  </data>
  <data name="[ReviewButton_Click] UserPrompt" xml:space="preserve">
    <value>As an expert writing assistant, suggest specific improvements to the paragraph, focusing on clarity, coherence, structure, grammar, and overall effectiveness. Ensure that your suggestions are detailed and aimed at improving the paragraph within the context of the entire Document.</value>
  </data>
  <data name="[Review] chatHistory #1" xml:space="preserve">
    <value>Please review the following paragraph extracted from the Document:</value>
  </data>
  <data name="(RAGControl.cs) [AskQuestion] chatHistory #1" xml:space="preserve">
    <value>Document Content:</value>
  </data>
  <data name="(RAGControl.cs) [AskQuestion] chatHistory #2" xml:space="preserve">
    <value>RAG Context:</value>
  </data>
  <data name="(CommentHandler.cs) [AIUserMentionTask] UserMentionSystemPrompt" xml:space="preserve">
    <value>You are an AI assistant in a document, answering user questions about specific text selections. Respond with empathy and as a mentor, offering practical guidance. Act like a thoughtful, knowledgeable friend providing insights. Your goal is to answer questions and deepen understanding, offering rational advice for improvement. Use any available context to make your response helpful. Keep advice simple, conversational, and clear, avoiding jargon, and provide actionable insights for better solutions or improvements.</value>
  </data>
  <data name="(CommentHandler.cs) [AICommentReplyTask] UserChatMessage #3" xml:space="preserve">
    <value>Text in Focus</value>
  </data>
  <data name="[AnalyzeText] UserChatMessage #1" xml:space="preserve">
    <value>Context</value>
  </data>
  <data name="[AddStreamingChatContentToRange] MessageBox Text #1" xml:space="preserve">
    <value>Model refused output!</value>
  </data>
  <data name="[AddStreamingChatContentToRange] MessageBox Caption #1" xml:space="preserve">
    <value>Refusal</value>
  </data>
  <data name="[AddStreamingImageContentToRange] Exception #1" xml:space="preserve">
    <value>Error inserting image</value>
  </data>
  <data name="[GetPictureAddress] InvalidDataException #1" xml:space="preserve">
    <value>Image URI handling is not currently supported by TextCraft!</value>
  </data>
  <data name="[GetPictureAddress] InvalidOperationException #1" xml:space="preserve">
    <value>No valid image data found in the content part.</value>
  </data>
  <data name="(ThisAddIn.cs) [InitializeEnvironmentVariables] ArgumentException #1" xml:space="preserve">
    <value>Could not find any language models from the API.</value>
  </data>
</root>